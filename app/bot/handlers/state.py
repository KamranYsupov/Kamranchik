import loguru
from aiogram import types, F, Router
from aiogram.filters import StateFilter, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from pydantic import ValidationError
from dependency_injector.wiring import inject, Provide

from core.container import Container
from schemas.resume import ResumeSchema
from services.telegram_user import TelegramUsersService
from bot.keyboards.inline import get_inline_keyboard
from bot.keyboards.reply import reply_keyboard_remove

state_router = Router()


class ResumeState(StatesGroup):
    name = State()
    old = State()
    about = State()
    photo = State()


@state_router.message(
    StateFilter('*'),
    or_f(Command('cancel'), (F.text.lower() == '.'))
)
async def cancel_handler(
        message: types.Message,
        state: FSMContext,
):
    await message.answer(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        reply_keyboard=reply_keyboard_remove
    )
    await state.clear()


@state_router.message(ResumeState.name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text
    if len(name) > 100:
        return await message.answer('–î–ª–∏–Ω–∞ –∏–º–µ–Ω—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 —Å–∏–º–≤–æ–ª–æ–≤')

    await state.update_data(name=name)
    await state.set_state(ResumeState.old)

    await message.answer(
        '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?'
        '\n<em>–û—Ç–ø—Ä–∞–≤—å "." –¥–ª—è –æ—Ç–º–µ–Ω—ã</em>',
        parse_mode='HTML'
    )


@state_router.message(ResumeState.old, F.text)
async def process_old(message: types.Message, state: FSMContext):
    old = message.text

    try:
        old = int(old)
        await state.update_data(old=old)
        await state.set_state(ResumeState.photo)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
        return

    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é'
        '\n<em>–û—Ç–ø—Ä–∞–≤—å "." –¥–ª—è –æ—Ç–º–µ–Ω—ã</em>',
        parse_mode='HTML'
    )


@state_router.message(ResumeState.photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await state.set_state(ResumeState.about)

    await message.answer(
        '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ'
        '\n<em>–û—Ç–ø—Ä–∞–≤—å "." –¥–ª—è –æ—Ç–º–µ–Ω—ã</em>',
        parse_mode='HTML')


@state_router.message(ResumeState.about, F.text)
@inject
async def process_about(
        message: types.Message,
        state: FSMContext,
        telegram_users_service: TelegramUsersService = Provide[
            Container.telegram_users_service
        ],
):
    about = message.text
    if len(about) > 500:
        await message.answer('–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤')
        return

    await state.update_data(about=about)

    resume_data = await state.get_data()
    resume_schema = ResumeSchema(**resume_data)
    await telegram_users_service.update(
        telegram_id=message.from_user.id,
        obj_in={
            'resume': resume_schema.model_dump()
        }
    )

    profile_message_info = (
            f'<b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞</b>:\n\n'
            + telegram_users_service
            .get_resume_message_info(resume_schema.model_dump())
    )

    await message.answer_photo(
        photo=resume_schema.photo,
        caption=profile_message_info,
        parse_mode='HTML',
        reply_markup=get_inline_keyboard(
            buttons={
                '–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç': 'watch_resumes',
                '–ò–∑–º–µ–Ω–∏—Ç—å üìù': 'update_resume',
                '–£–¥–∞–ª–∏—Ç—å üóë': 'delete_resume',
            }
        ),
    )

    await state.clear()
